//*******************************************************************
/*!
\file   Properties.h
\author
\date
\brief
*/

//###################################################################
//
// WARNING
//
// Due to a limitation in IPC:
//
//   1. The size of the data structs defined as "Data"
//      must not exceed 60 Bytes
//
//   2. The size must be a multiple of 2
//
//*******************************************************************
#ifndef _PROPERTIES_H
#define _PROPERTIES_H

//*******************************************************************
#define NUM_OF_MOTOR_PORTS  4
#define NUM_OF_SERVO_PORTS  2
#define NUM_OF_SENSOR_PORTS 4

//*******************************************************************
//
// cConfigToORB
//
//*******************************************************************
class cConfigToORB
{
  public:
    //---------------------------------------------------------------
    #pragma pack(1)
    class Data
    {
      public:
        //***********************************************************

        //-----------------------------------------------------------
        class SensorConfig
        {
          public:
            //-------------------------------------------------------
            typedef enum
            {
              ANALOG = 0,
              UART   = 1,
              I2C    = 2,
              TOF    = 3,
              TOUCH  = 4,
              DEBUG  = 0x7F
            } Type;

            //-------------------------------------------------------
            SensorConfig()
            {
              type   = ANALOG;
              mode   = 0;
              option = 0;
            }
            BYTE type;
            BYTE mode;
            WORD option;

        } sensorConfig[4];

        //-----------------------------------------------------------
        class MotorConfig
        {
          public:
            //-------------------------------------------------------
            MotorConfig()
            {
            }
            WORD ticsPerRotation;
            BYTE acceleration;
            BYTE Regler_Kp;
            BYTE Regler_Ki;
            BYTE reserved[3];

        } motorConfig[4];

    //-----------------------------------------------------------
    BYTE reserved[12];

        //***********************************************************

      public:
        //-----------------------------------------------------------
        Data()
        {
          memset(this,0,sizeof(cConfigToORB));
        }

    } data;
    #pragma pack()

    //---------------------------------------------------------------
    cConfigToORB()
    {
    }

    //---------------------------------------------------------------
    virtual void update()
    {
    }

}; //cConfigToORB

//*******************************************************************
//
// cPropToORB
//
//*******************************************************************
class cPropToORB
{
  public:
    //---------------------------------------------------------------
    #pragma pack(1)
    class Data
    {
      public:
        //***********************************************************
        //-----------------------------------------------------------
        class Motor
        {
          public:
            //-------------------------------------------------------
            typedef enum
            {
              POWER_MODE  = 0,
              BRAKE_MODE  = 1,
              SPEED_MODE  = 2,
              MOVETO_MODE = 3
            } MotorMode_type;

          public:
            //-------------------------------------------------------
            Motor()
            {
              mmode  = 0;
              speed = 0;
              pos   = 0;
            }

          public:
            //-------------------------------------------------------
            BYTE  mmode;
            short speed;
            int   pos;

        } motor[4];

        //-----------------------------------------------------------
        class ModelServo
        {
          public:
            //-------------------------------------------------------
            ModelServo()
            {
              smode  = 0;
              spos   = 0;
            }

          public:
            //-------------------------------------------------------
            BYTE smode;
            BYTE spos;

        } modelServo[2];
        //***********************************************************

      public:
        //-----------------------------------------------------------
        Data()
        {
        }

    } data;
    #pragma pack()

    //---------------------------------------------------------------
    cPropToORB()
    {
    }

    //---------------------------------------------------------------
    virtual void update()
    {
    }

}; //cPropToORB

//*******************************************************************
//
// cPropFromORB
//
//*******************************************************************
class cPropFromORB
{
  public:
    //---------------------------------------------------------------
    #pragma pack(1)
    class Data
    {
      public:
        //***********************************************************
        class Motor
        {
          public:
            //-------------------------------------------------------
            Motor()
            {
              pwr   = 0;
              speed = 0;
              pos   = 0;
            }

          public:
            //-------------------------------------------------------
            char  pwr;
            short speed;
            int   pos;

        } motor[4];

        //-----------------------------------------------------------
        class Sensor
        {
          public:
            //-------------------------------------------------------
            Sensor()
            {
              value      = 0;
              type       = 0;
              descriptor = 0;
              option     = 0;
            }

          public:
            //-------------------------------------------------------
            unsigned int   value;
            BYTE           type;
            BYTE           descriptor;
            BYTE           option;

        } sensor[4];

        //-----------------------------------------------------------
        BYTE digital;
        BYTE Vcc; // in 1/10 V
        BYTE status;
        BYTE reserved;
        //***********************************************************

      public:
        //-----------------------------------------------------------
        Data()
        {
          digital  = 0;
          Vcc      = 0;
          status   = 0;
          reserved = 0;
        }

    } data;
    #pragma pack()

    //---------------------------------------------------------------
    cPropFromORB()
    {
    }

    //---------------------------------------------------------------
    virtual void update()
    {
    }

}; //cPropFromORB

//*******************************************************************
//
// cMonitorToORB
//
//*******************************************************************
class cMonitorToORB
{
  public:
    //---------------------------------------------------------------
    #pragma pack(1)
    class Data
    {
      public:
        //***********************************************************
        BYTE bmode;
        BYTE parameter;
        BYTE keycode;
        //***********************************************************

      public:
        //-----------------------------------------------------------
        Data()
        {
          bmode     = 0;
          parameter = 0;
          keycode   = 0;
        }

    } data;
    #pragma pack()

    //---------------------------------------------------------------
    cMonitorToORB()
    {
    }

    //---------------------------------------------------------------
    virtual void update()
    {
    }

}; //cMonitorToORB


//*******************************************************************
//
// cMonitorFromORB
//
//*******************************************************************
class cMonitorFromORB
{
  public:
    //---------------------------------------------------------------
    #pragma pack(1)
    class Data
    {
      public:
        //***********************************************************
        BYTE line;
        char text[31];
        //***********************************************************

      public:
        //-----------------------------------------------------------
        Data()
        {
          line = 0;
          memset( text, 0, 31 );
        }

    } data;
    #pragma pack()

    //---------------------------------------------------------------
    cMonitorFromORB()
    {
    }

    //---------------------------------------------------------------
    virtual void update()
    {
    }

}; //

//*******************************************************************
//
// cSettingsFromORB
//
//*******************************************************************
class cSettingsFromORB
{
  public:
    //---------------------------------------------------------------
    #pragma pack(1)
    class Data
    {
      public:
        //***********************************************************
        WORD version[2];
        WORD board[2];
        char name[21];
        BYTE VCC_ok;
        BYTE VCC_low;
        //***********************************************************

      public:
        //-----------------------------------------------------------
        Data()
        {
          #ifdef ORB_FIRMWARE
          strncpy(name,"---",20);
          version[0] = VERSION_MAIN;
          version[1] = VERSION_SUB;
          board[0]   = BOARD_MAIN;
          board[1]   = BOARD_SUB;
          #else
          strncpy(name,"---",20);
          version[0] = 0;
          version[1] = 0;
          board[0]   = 0;
          board[1]   = 0;
          #endif
          VCC_ok  = 0;
          VCC_low = 0;
        }

    } data;
    #pragma pack()

    //---------------------------------------------------------------
    cSettingsFromORB()
    {
    }

    //---------------------------------------------------------------
    virtual void update()
    {
    }

}; //

//*******************************************************************
//
// cSettingsToORB
//
//*******************************************************************
class cSettingsToORB
{
  public:
    //---------------------------------------------------------------
    #pragma pack(1)
    class Data
    {
      public:
        //***********************************************************
        BYTE command;
        char name[21];
        BYTE VCC_ok;
        BYTE VCC_low;

        //***********************************************************

      public:
        //-----------------------------------------------------------
        Data()
        {
          command  = 0;
          strncpy(name,"---",20);
          VCC_ok   = 78;
          VCC_low  = 72;
        }

    } data;
    #pragma pack()

    //---------------------------------------------------------------
    cSettingsToORB()
    {
    }

    //---------------------------------------------------------------
    virtual void update()
    {
    }

}; //

#endif // _PROPERTIES_H
